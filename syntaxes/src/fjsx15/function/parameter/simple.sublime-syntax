%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

hidden: true
scope: ...

variables:
  commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*

  genericArguments: |
    (<
      [^<>]*
      \g<-1>?
      [^<>]*
    >)

  parameters: |
    (\(
      (?> '(?:\'|[^'])*'
        | "(?:\"|[^"])*"
        | `(?:\`|[^`])*`
        | [^'"`()]*
      )
      \g<-1>?
      (?> '(?:\'|[^'])*'
        | "(?:\"|[^"])*"
        | `(?:\`|[^`])*`
        | [^'"`()]*
      )
    \))

  flowOperators: |
    (?> &(?!&)
      | \|(?!\|)
    )

  string: |
    (?> '(?:\'|[^'])*?'
      | "(?:\"|[^"])*?"
      | `(?:\`|[^`])*?`
    )

  simpleFlowType: |
    (?> {{string}}
      | {{commonIdentifier}}
        {{genericArguments}}?
    )

  flowFunction: |
    (
      {{parameters}}
      \s*=>\s*
      (?> {{simpleFlowType}}
        | \g<-2>
      )
    )

  complexType: |
    (
      \??\s*
      (?> {{simpleFlowType}}
        | {{flowFunction}}
      )
      \s*{{flowOperators}}?
      \s*\g<-5>?
    )

  flowComment: /\*\s*:.*?\*/

  type: |
    (?> {{flowComment}}
      | :{{complexType}}
    )

contexts:
  main:
    # With default value.
    - match: |
        (?xi)
        {{commonIdentifier}}
        (?=
          \s*\??
          \s*{{type}}?
          \s*=(?!\s*>)
        )
      scope: variable.parameter.function.js.fjsx15
      set: [
        optional-default-value,
        optional-modifier-and-type
      ]
    # Normal parameter.
    - match: (?xi){{commonIdentifier}}
      scope: variable.parameter.function.js.fjsx15
      set: optional-modifier-and-type

  expression:
    - include: Packages/Naomi/syntaxes/fjsx15/expression.sublime-syntax

  optional-default-value:
    - meta_scope: meta.function.parameter.optional.js.fjsx15
    - match: (?=(?>[,;:)\]}]|=>))
      pop: true
    - match: (?==)
      set: expression

  optional-modifier-and-type:
    - include: Packages/Naomi/syntaxes/flow1/optional-modifier.no-pop.sublime-syntax
    - include: Packages/Naomi/syntaxes/flow1/optional-associated-type.sublime-syntax
