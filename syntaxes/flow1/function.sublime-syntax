%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

hidden: true

scope: ...

variables:
  commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*

  complexType: |
    (
      (?:\?\s*)?
      (?> {{simpleFlowType}}
        | {{flowFunction}}
      )
      (?:\s*{{flowOperators}})?
      (?:\s*\g<-1>)?
    )

  flowFunction: |
    {{parameters}}
    \s*=>

  flowOperators: |
    (?> &(?!&)
      | \|(?!\|)
    )

  genericArguments: |
    (<
      (?> {{string}}
        | \g<-1>
        | [^<>]
      )*
    >)

  parameters: |
    (\(
      (?> {{string}}
        | \g<-1>
        | [^()]
      )*
    \))

  simpleFlowType: |
    (?> {{string}}
      | {{commonIdentifier}}
        {{genericArguments}}?
        (?:\[\s*\])?
    )

  string: |
    (?> '(?:\'|[^'])*?'
      | "(?:\"|[^"])*?"
      | `(?:\`|[^`])*?`
    )

contexts:
  main:
    # Normal.
    - match: |
        (?xi)
        (?=
          {{genericArguments}}?
          {{flowFunction}}
        )
      set: declaration
    # Single parameter.
    - match: |
        (?xi)
        (?=
          (?:{{commonIdentifier}}\s*:\s*)?
          {{complexType}}
          \s*=>
        )
      set: [
        return,
        type-optional-tail,
        type-head-or-param
      ]

  declaration:
    # Generic parameters.
    - match: (?=<)
      push: generic-parameters
    # Parameters.
    - match: (?=\()
      set: [
        return,
        parameters
      ]

  generic-parameters:
    - include: Packages/Naomi/syntaxes/flow1/generic/parameters.sublime-syntax

  optional-type-expression:
    - include: Packages/Naomi/syntaxes/flow1/optional-type-expression.sublime-syntax

  parameters:
    - include: Packages/Naomi/syntaxes/flow1/function/parameters.sublime-syntax

  return:
    - match: =>
      scope: storage.type.function.arrow.flow
      set: optional-type-expression

  type-head-or-param:
    - include: Packages/Naomi/syntaxes/flow1/function/parameters/simple.sublime-syntax
    - include: Packages/Naomi/syntaxes/flow1/type-expression.sublime-syntax#no-function-head

  type-optional-tail:
    - include: Packages/Naomi/syntaxes/flow1/type-expression.sublime-syntax#optional-tail
